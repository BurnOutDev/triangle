// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ReserveProject.Infrastructure.Database;

namespace ReserveProject.Infrastructure.Migrations
{
    [DbContext(typeof(PrimeDbContext))]
    partial class PrimeDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0-preview5.19227.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ReserveProject.Domain.Aggregates.BankAccountAggregate.BankAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BankId");

                    b.Property<DateTimeOffset>("CreateDate");

                    b.Property<int>("EntityStatus");

                    b.Property<DateTimeOffset>("LastChangeDate");

                    b.Property<string>("Name");

                    b.Property<string>("Number");

                    b.Property<int?>("PartyId");

                    b.Property<Guid>("UId");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.HasIndex("PartyId");

                    b.ToTable("BankAccount");
                });

            modelBuilder.Entity("ReserveProject.Domain.Aggregates.BankAggregate.Bank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CityId");

                    b.Property<DateTimeOffset>("CreateDate");

                    b.Property<string>("Email");

                    b.Property<int>("EntityStatus");

                    b.Property<string>("IdentifierCode");

                    b.Property<bool>("IsActive");

                    b.Property<DateTimeOffset>("LastChangeDate");

                    b.Property<string>("Name");

                    b.Property<string>("Phone");

                    b.Property<string>("Street");

                    b.Property<string>("StreetInDetails");

                    b.Property<Guid>("UId");

                    b.Property<string>("ZipCode");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Bank");
                });

            modelBuilder.Entity("ReserveProject.Domain.Aggregates.CurrencyAggregate.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasMaxLength(3);

                    b.Property<DateTimeOffset>("CreateDate");

                    b.Property<int>("EntityStatus");

                    b.Property<DateTimeOffset>("LastChangeDate");

                    b.Property<string>("Name");

                    b.Property<string>("Symbol")
                        .HasMaxLength(1);

                    b.Property<Guid>("UId");

                    b.HasKey("Id");

                    b.ToTable("Currency");
                });

            modelBuilder.Entity("ReserveProject.Domain.Aggregates.CustomerAggregate.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("CreateDate");

                    b.Property<int>("EntityStatus");

                    b.Property<DateTimeOffset>("LastChangeDate");

                    b.Property<string>("Name");

                    b.Property<Guid>("UId");

                    b.HasKey("Id");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("ReserveProject.Domain.Aggregates.InvoiceAggregate.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("CreateDate");

                    b.Property<int>("CustomerId");

                    b.Property<DateTimeOffset>("DueDate");

                    b.Property<int>("EntityStatus");

                    b.Property<string>("InvoiceNumber");

                    b.Property<DateTimeOffset>("LastChangeDate");

                    b.Property<int>("PaymentTermId");

                    b.Property<int>("SalesPersonId");

                    b.Property<DateTimeOffset>("StartDate");

                    b.Property<int>("Status");

                    b.Property<decimal>("TaxAmmount");

                    b.Property<decimal>("Total");

                    b.Property<Guid>("UId");

                    b.Property<decimal>("UnTaxedAmount");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PaymentTermId");

                    b.HasIndex("SalesPersonId");

                    b.ToTable("Invoice");
                });

            modelBuilder.Entity("ReserveProject.Domain.Aggregates.InvoiceAggregate.InvoiceLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("CreateDate");

                    b.Property<string>("Description");

                    b.Property<int>("EntityStatus");

                    b.Property<int?>("InvoiceId");

                    b.Property<DateTimeOffset>("LastChangeDate");

                    b.Property<decimal>("Price");

                    b.Property<int>("ProductId");

                    b.Property<int>("Quantity");

                    b.Property<decimal>("SubTotal");

                    b.Property<decimal>("TaxAmmount");

                    b.Property<Guid>("UId");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("ProductId");

                    b.ToTable("InvoiceLine");
                });

            modelBuilder.Entity("ReserveProject.Domain.Aggregates.InvoiceAggregate.InvoiceLineTax", b =>
                {
                    b.Property<int>("InvoiceLineId");

                    b.Property<int>("TaxId");

                    b.HasKey("InvoiceLineId", "TaxId");

                    b.HasIndex("TaxId");

                    b.ToTable("InvoiceLineTax");
                });

            modelBuilder.Entity("ReserveProject.Domain.Aggregates.Location.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("CreateDate");

                    b.Property<int>("EntityStatus");

                    b.Property<DateTimeOffset>("LastChangeDate");

                    b.Property<string>("Name");

                    b.Property<int>("StateId");

                    b.Property<Guid>("UId");

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.ToTable("City");
                });

            modelBuilder.Entity("ReserveProject.Domain.Aggregates.Location.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CountryCode");

                    b.Property<DateTimeOffset>("CreateDate");

                    b.Property<int>("EntityStatus");

                    b.Property<DateTimeOffset>("LastChangeDate");

                    b.Property<string>("Name");

                    b.Property<Guid>("UId");

                    b.HasKey("Id");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("ReserveProject.Domain.Aggregates.Location.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId");

                    b.Property<DateTimeOffset>("CreateDate");

                    b.Property<int>("EntityStatus");

                    b.Property<DateTimeOffset>("LastChangeDate");

                    b.Property<string>("Name");

                    b.Property<Guid>("UId");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("State");
                });

            modelBuilder.Entity("ReserveProject.Domain.Aggregates.PartyAggregate.Party", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CityId");

                    b.Property<DateTimeOffset>("CreateDate");

                    b.Property<string>("Email");

                    b.Property<int>("EntityStatus");

                    b.Property<int>("Language");

                    b.Property<DateTimeOffset>("LastChangeDate");

                    b.Property<string>("Mobile");

                    b.Property<string>("Name");

                    b.Property<string>("Phone");

                    b.Property<int>("Role");

                    b.Property<string>("Street");

                    b.Property<string>("StreetDetails");

                    b.Property<string>("TaxCode");

                    b.Property<int>("Type");

                    b.Property<Guid>("UId");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Party");
                });

            modelBuilder.Entity("ReserveProject.Domain.Aggregates.PaymentTermAggregate.PaymentTerm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("CreateDate");

                    b.Property<int>("DaysCount");

                    b.Property<string>("Description");

                    b.Property<int>("EntityStatus");

                    b.Property<DateTimeOffset>("LastChangeDate");

                    b.Property<string>("Name");

                    b.Property<Guid>("UId");

                    b.HasKey("Id");

                    b.ToTable("PaymentTerm");
                });

            modelBuilder.Entity("ReserveProject.Domain.Aggregates.ProductAggregate.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BarCode");

                    b.Property<int>("CategoryId");

                    b.Property<decimal>("Cost");

                    b.Property<DateTimeOffset>("CreateDate");

                    b.Property<int>("EntityStatus");

                    b.Property<DateTimeOffset>("LastChangeDate");

                    b.Property<string>("Name");

                    b.Property<int>("Role");

                    b.Property<decimal>("SalesPrice");

                    b.Property<int>("Type");

                    b.Property<Guid>("UId");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("ReserveProject.Domain.Aggregates.ProductAggregate.ProductTax", b =>
                {
                    b.Property<int>("ProductId");

                    b.Property<int>("TaxId");

                    b.HasKey("ProductId", "TaxId");

                    b.HasIndex("TaxId");

                    b.ToTable("ProductTax");
                });

            modelBuilder.Entity("ReserveProject.Domain.Aggregates.ProductCategoryAggregate.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("CreateDate");

                    b.Property<int>("EntityStatus");

                    b.Property<DateTimeOffset>("LastChangeDate");

                    b.Property<string>("Name");

                    b.Property<int?>("ParentId");

                    b.Property<Guid>("UId");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("ProductCategory");
                });

            modelBuilder.Entity("ReserveProject.Domain.Aggregates.SalesPersonAggregate.SalesPerson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("CreateDate");

                    b.Property<string>("Email");

                    b.Property<int>("EntityStatus");

                    b.Property<DateTimeOffset>("LastChangeDate");

                    b.Property<string>("Mobile");

                    b.Property<string>("Name");

                    b.Property<string>("Phone");

                    b.Property<Guid>("UId");

                    b.HasKey("Id");

                    b.ToTable("SalesPerson");
                });

            modelBuilder.Entity("ReserveProject.Domain.Aggregates.TaxAggregate.Tax", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Computation");

                    b.Property<DateTimeOffset>("CreateDate");

                    b.Property<int>("EntityStatus");

                    b.Property<DateTimeOffset>("LastChangeDate");

                    b.Property<string>("Name");

                    b.Property<int>("Scope");

                    b.Property<Guid>("UId");

                    b.Property<decimal>("Value");

                    b.HasKey("Id");

                    b.ToTable("Tax");
                });

            modelBuilder.Entity("ReserveProject.Shared.Logging.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("CreateDate");

                    b.Property<string>("Data");

                    b.Property<Guid>("EntityId");

                    b.Property<bool>("ProcessedByJob");

                    b.Property<string>("RemoteIp");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.ToTable("Events","Event");
                });

            modelBuilder.Entity("ReserveProject.Domain.Aggregates.BankAccountAggregate.BankAccount", b =>
                {
                    b.HasOne("ReserveProject.Domain.Aggregates.BankAggregate.Bank", "Bank")
                        .WithMany()
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ReserveProject.Domain.Aggregates.PartyAggregate.Party", null)
                        .WithMany("BankAccounts")
                        .HasForeignKey("PartyId");
                });

            modelBuilder.Entity("ReserveProject.Domain.Aggregates.BankAggregate.Bank", b =>
                {
                    b.HasOne("ReserveProject.Domain.Aggregates.Location.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ReserveProject.Domain.Aggregates.InvoiceAggregate.Invoice", b =>
                {
                    b.HasOne("ReserveProject.Domain.Aggregates.CustomerAggregate.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ReserveProject.Domain.Aggregates.PaymentTermAggregate.PaymentTerm", "PaymentTerm")
                        .WithMany()
                        .HasForeignKey("PaymentTermId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ReserveProject.Domain.Aggregates.SalesPersonAggregate.SalesPerson", "SalesPerson")
                        .WithMany()
                        .HasForeignKey("SalesPersonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ReserveProject.Domain.Aggregates.InvoiceAggregate.InvoiceLine", b =>
                {
                    b.HasOne("ReserveProject.Domain.Aggregates.InvoiceAggregate.Invoice", null)
                        .WithMany("InvoiceLines")
                        .HasForeignKey("InvoiceId");

                    b.HasOne("ReserveProject.Domain.Aggregates.ProductAggregate.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ReserveProject.Domain.Aggregates.InvoiceAggregate.InvoiceLineTax", b =>
                {
                    b.HasOne("ReserveProject.Domain.Aggregates.InvoiceAggregate.InvoiceLine", "InvoiceLine")
                        .WithMany("InvoiceLineTaxes")
                        .HasForeignKey("InvoiceLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReserveProject.Domain.Aggregates.TaxAggregate.Tax", "Tax")
                        .WithMany("TaxInvoiceLines")
                        .HasForeignKey("TaxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ReserveProject.Domain.Aggregates.Location.City", b =>
                {
                    b.HasOne("ReserveProject.Domain.Aggregates.Location.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ReserveProject.Domain.Aggregates.Location.State", b =>
                {
                    b.HasOne("ReserveProject.Domain.Aggregates.Location.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ReserveProject.Domain.Aggregates.PartyAggregate.Party", b =>
                {
                    b.HasOne("ReserveProject.Domain.Aggregates.Location.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ReserveProject.Domain.Aggregates.ProductAggregate.Product", b =>
                {
                    b.HasOne("ReserveProject.Domain.Aggregates.ProductCategoryAggregate.ProductCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ReserveProject.Domain.Aggregates.ProductAggregate.ProductTax", b =>
                {
                    b.HasOne("ReserveProject.Domain.Aggregates.ProductAggregate.Product", "Product")
                        .WithMany("ProductTaxes")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReserveProject.Domain.Aggregates.TaxAggregate.Tax", "Tax")
                        .WithMany("TaxProducts")
                        .HasForeignKey("TaxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ReserveProject.Domain.Aggregates.ProductCategoryAggregate.ProductCategory", b =>
                {
                    b.HasOne("ReserveProject.Domain.Aggregates.ProductCategoryAggregate.ProductCategory", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
