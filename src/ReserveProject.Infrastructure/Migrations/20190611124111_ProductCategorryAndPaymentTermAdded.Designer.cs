// <auto-generated />
using System;
using ReserveProject.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ReserveProject.Infrastructure.Migrations
{
    [DbContext(typeof(PrimeDbContext))]
    [Migration("20190611124111_ProductCategorryAndPaymentTermAdded")]
    partial class ProductCategorryAndPaymentTermAdded
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0-preview5.19227.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ReserveProject.Domain.Aggregates.BankAccountAggregate.BankAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BankId");

                    b.Property<DateTimeOffset>("CreateDate");

                    b.Property<int>("EntityStatus");

                    b.Property<DateTimeOffset>("LastChangeDate");

                    b.Property<string>("Name");

                    b.Property<string>("Number");

                    b.Property<Guid>("UId");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.ToTable("BankAccount");
                });

            modelBuilder.Entity("ReserveProject.Domain.Aggregates.BankAggregate.Bank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CityId");

                    b.Property<DateTimeOffset>("CreateDate");

                    b.Property<string>("Email");

                    b.Property<int>("EntityStatus");

                    b.Property<string>("IdentifierCode");

                    b.Property<bool>("IsActive");

                    b.Property<DateTimeOffset>("LastChangeDate");

                    b.Property<string>("Name");

                    b.Property<string>("Phone");

                    b.Property<string>("Street");

                    b.Property<string>("StreetInDetails");

                    b.Property<Guid>("UId");

                    b.Property<string>("ZipCode");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Bank");
                });

            modelBuilder.Entity("ReserveProject.Domain.Aggregates.CustomerAggregate.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("CreateDate");

                    b.Property<int>("EntityStatus");

                    b.Property<DateTimeOffset>("LastChangeDate");

                    b.Property<string>("Name");

                    b.Property<Guid>("UId");

                    b.HasKey("Id");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("ReserveProject.Domain.Aggregates.Location.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("CreateDate");

                    b.Property<int>("EntityStatus");

                    b.Property<DateTimeOffset>("LastChangeDate");

                    b.Property<string>("Name");

                    b.Property<int>("StateId");

                    b.Property<Guid>("UId");

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.ToTable("City");
                });

            modelBuilder.Entity("ReserveProject.Domain.Aggregates.Location.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CountryCode");

                    b.Property<DateTimeOffset>("CreateDate");

                    b.Property<int>("EntityStatus");

                    b.Property<DateTimeOffset>("LastChangeDate");

                    b.Property<string>("Name");

                    b.Property<Guid>("UId");

                    b.HasKey("Id");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("ReserveProject.Domain.Aggregates.Location.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId");

                    b.Property<DateTimeOffset>("CreateDate");

                    b.Property<int>("EntityStatus");

                    b.Property<DateTimeOffset>("LastChangeDate");

                    b.Property<string>("Name");

                    b.Property<Guid>("UId");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("State");
                });

            modelBuilder.Entity("ReserveProject.Domain.Aggregates.PaymentTermAggregate.PaymentTerm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("CreateDate");

                    b.Property<int>("DaysCount");

                    b.Property<string>("Description");

                    b.Property<int>("EntityStatus");

                    b.Property<DateTimeOffset>("LastChangeDate");

                    b.Property<string>("Name");

                    b.Property<Guid>("UId");

                    b.HasKey("Id");

                    b.ToTable("PaymentTerm");
                });

            modelBuilder.Entity("ReserveProject.Domain.Aggregates.ProductCategoryAggregate.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("CreateDate");

                    b.Property<int>("EntityStatus");

                    b.Property<DateTimeOffset>("LastChangeDate");

                    b.Property<string>("Name");

                    b.Property<int?>("ParentId");

                    b.Property<Guid>("UId");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("ProductCategory");
                });

            modelBuilder.Entity("ReserveProject.Domain.Aggregates.TaxAggregate.Tax", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Computation");

                    b.Property<DateTimeOffset>("CreateDate");

                    b.Property<int>("EntityStatus");

                    b.Property<DateTimeOffset>("LastChangeDate");

                    b.Property<string>("Name");

                    b.Property<int>("Scope");

                    b.Property<Guid>("UId");

                    b.Property<decimal>("Value");

                    b.HasKey("Id");

                    b.ToTable("Tax");
                });

            modelBuilder.Entity("ReserveProject.Shared.Logging.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("CreateDate");

                    b.Property<string>("Data");

                    b.Property<Guid>("EntityId");

                    b.Property<bool>("ProcessedByJob");

                    b.Property<string>("RemoteIp");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.ToTable("Events","Event");
                });

            modelBuilder.Entity("ReserveProject.Domain.Aggregates.BankAccountAggregate.BankAccount", b =>
                {
                    b.HasOne("ReserveProject.Domain.Aggregates.BankAggregate.Bank", "Bank")
                        .WithMany()
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ReserveProject.Domain.Aggregates.BankAggregate.Bank", b =>
                {
                    b.HasOne("ReserveProject.Domain.Aggregates.Location.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ReserveProject.Domain.Aggregates.Location.City", b =>
                {
                    b.HasOne("ReserveProject.Domain.Aggregates.Location.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ReserveProject.Domain.Aggregates.Location.State", b =>
                {
                    b.HasOne("ReserveProject.Domain.Aggregates.Location.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ReserveProject.Domain.Aggregates.ProductCategoryAggregate.ProductCategory", b =>
                {
                    b.HasOne("ReserveProject.Domain.Aggregates.ProductCategoryAggregate.ProductCategory", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
